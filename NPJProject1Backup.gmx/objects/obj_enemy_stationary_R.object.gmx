<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_stationary_bounce</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Movement
hspd = 0;
vspd = 0;
jspd = 0;
jumping_type = false;
jumping = false;
dir = 0;
grv = 0;
frc = 0.5;
slope_mod = 2;

//Attacks
firing = false;
first_shot = true;
fir_speed = 45;
follow_up_attack = false;
meleeAttack = false;
antiAir = false;
melee_index = 0;
melee_hitbox = noone;
selected_projectile = noone;

//Damage and Hit Reaction
hit = false;
hitdir = 0;
old_speed = 0;
impetus = 1;
weight_factor = 1;
hitstun = false;
hitstun_direction = 0;
hitstop = false;
damage_hitstop = false;
old_state = e_state.idle;
alarm_array[0] = -1;
air_recovery = false;
stopped = true;
valid = false;

slide_through = true;

//Crash State
mxspd = 40;
hp = 1;
hp_max = 1;
crash_sprite = spr_enemy_stationary_crash;
cp = 2;
cp_max = 2;
rotation_angle = 0;
fragmenting = false;

spark_interval = 24;
spark_offset_x = 0;
spark_offset_y = 0;

//Sprites
idle_sprite = spr_enemy_stationary_bounce;
move_sprite = spr_enemy_stationary_bounce;
fire_sprite = spr_enemy_stationary_bounce_firing;
melee_sprite = spr_enemy_stationary_bounce;
anti_air_sprite = spr_enemy_stationary_bounce;
follow_up_sprite = spr_enemy_stationary_bounce;
damage_sprite = spr_enemy_stationary_bounce;
air_sprite = spr_enemy_stationary_bounce;
crash_sprite = spr_enemy_small_crash_hitbox;
crash_display_sprite = spr_enemy_stationary_bounce_crash_display;

animation_loop = true;
looping_melee = true;

state = e_state.idle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit End
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crash End
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop firing
firing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hitstun End
hit = false;
hitstun = false;
/*stopped = true;
speed = 0;
direction = 0;
state = e_state.idle*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Projectile
firing = true;
hspd = 0;
//projectile = instance_create(x,y, obj_projectile_ricochet);
//alarm[0] = room_speed * (fir_speed/60);
if (collision_line(x,y,obj_player.x,obj_player.y,obj_boundary,false,true) || collision_line(x,y,obj_player.x,obj_player.y,obj_enemy,false,true))
   {
    var firing_range = distance_to_object(obj_player)/1.5;
    var firing_angle = point_direction(x,y,obj_player.x,obj_player.y);
    var original_firing_angle = firing_angle;
    for (i = 1; i &lt; 4; i++)
        {
         firing_angle += (i*15);
         //show_debug_message("Try: " + string(firing_angle));
         //instance_create(x+lengthdir_x(firing_range,firing_angle),y+lengthdir_y(firing_range,firing_angle),obj_test2);
         if (!collision_line(x,y,x+lengthdir_x(firing_range,firing_angle),y+lengthdir_y(firing_range,firing_angle),obj_boundary,false,true))
            {
             scr_create_projectile(7,firing_angle,x,y,obj_projectile_ricochet);
             break;
            }
         firing_angle = original_firing_angle;
         firing_angle -= (i*15);
         //show_debug_message("NOW TRY: " + string(firing_angle));
         //instance_create(x+lengthdir_x(firing_range,firing_angle),y+lengthdir_y(firing_range,firing_angle),obj_test2);
         if (!collision_line(x,y,x+lengthdir_x(firing_range,firing_angle),y+lengthdir_y(firing_range,firing_angle),obj_boundary,false,true))
            {
             scr_create_projectile(7,firing_angle,x,y,obj_projectile_ricochet);
             break;
            }
         firing_angle = original_firing_angle;
        }
   }
else
   {
    //show_debug_message("No obstruction!!");
    var firing_angle = round(point_direction(x,y,obj_player.x,obj_player.y)/10)*10;
    scr_create_projectile(7,firing_angle,x,y,obj_projectile_ricochet);
    
   }
if (alarm[2] == -1)
   {
    alarm[2] = room_speed * (26/60);
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch State
switch (state)
       {
        case e_state.idle: 
             {   
              scr_enemy_no_wall_check(); 
              break;
             }
        case e_state.chase: 
             {
              scr_enemy_stationary_ricochet_triggered(); 
              break;        
             }
        case e_state.hitstun:
             {
              scr_hit_stun();
              break;
             }
        case e_state.hitstop:
             {
              scr_hitstop();
              break;
             }
        case e_state.crash:
             {
              scr_crash();
              break;
             }
       }
       
//Animations
scr_enemy_animation_control_script();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_enemy_animation_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
