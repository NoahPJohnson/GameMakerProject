<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_v2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Movement Normal
mve = 0;
grv = 0.8;
frc = 1; 
bat = false;
right = true;
up = false;
hspd = 0;
vspd = 0;
jspd = 14;
jump = 14;
jumping = false;
mspd_normal = 7;
mspd = mspd_normal;
slope_mod = 1;
wallBounce = false;

stick_moved_up = false;
stick_moved_down = false;
stick_moved_left = false;
stick_moved_right = false;

//Crouching
crouching = false;
sliding = false;
slide2 = false;
siframes = false;

//Swinging
charging = false;
chargeOne = false;
chargeTwo = false;
up_stored = false;
swinging = false;
recovery = false;

//HP and Damage
hp_max = 100;
hp = 100;
iframes = false;
hitstop = false;
damage_hitstop = false;
old_state = states.normal;
alarm_array[0] = -1;
hitdir = 0;
invincibility_time = 0;
knockback_time = 0;
knock_force = 1;

//Stamina
sp_max = 100;
sp = 100;
sp_regain_rate = 0;

//Dashing
doubleTapWindow = false;
directionMemory = false;
dash = 1;
dashing = false;
dash_speed = 12;
drive = false;
dashJump = false;

//Powerups
big_bat_active = false;
invincibility_active = false;
infinite_stamina_active = false;
constant_charge_active = false;

//State
state = states.normal;
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Player Hitstop
if (damage_hitstop == false)
   {
    show_debug_message("Player damage Hitstop is false");
    for (i = 0; i &lt; 11; i++)
        {
         //show_debug_message("player alarm_array: " + string(i) + " = " + string(alarm_array[i]));
         alarm[i] = alarm_array[i];
        }
    show_debug_message("player's Old State is " + string(old_state));
    hitstop = false;
    state = old_state;
   }
else
   {
    show_debug_message("player is coming out of damage hitstop.");
    if (alarm[7] == -1)
       {
        iframes = true; 
        alarm[7] = room_speed * (invincibility_time/60);
        //show_debug_message("Start Invincibility: player swing recovery = " + string(recovery) + "alarm[7] = " + string(invincibility_time));
       }
    if (alarm[8] = -1)
       {
                    
        jumping = false;
        //sprite_index = spr_player_iframes;
        alarm[8] = room_speed * (knockback_time/60);
        //show_debug_message("Start Invincibility: player swing recovery = " + string(recovery) + "alarm[8] = " + string(knockback_time));
        //knock_force = 4;
        state = states.knockback;
       }
    //HP = 0
    scr_zero_health();
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Double-Tap Window End
doubleTapWindow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide Part 2
frc = 1.7;
siframes = false;
if (sliding == true)
   {
    //sprite_index = spr_player_crouching2;
   } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback End
jspd = jump;
if (vspd &lt; 0)// &amp;&amp; !key_J_held)
   {
    vspd = max(vspd,-jspd/4);
   }  
//vspd = 0;
//iframes = false;
charging = false;
chargeOne = false;
chargeTwo = false;
swinging = false;
recovery = false;
wallBounce = false;
dashing = false;
crouching = false;
mspd = mspd_normal;
doubleTapWindow = false;
//sprite_index = spr_player_iframes;
alarm[0] = -1;
alarm[1] = -1;
alarm[2] = -1;
alarm[3] = -1;
alarm[4] = -1;
alarm[5] = -1;
alarm[6] = -1;
//alarm[7] = -1;
alarm[9] = -1;
alarm[10] = -1;
state = states.normal;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincibility End
iframes = false;
jumping = false;
//sprite_index = spr_player;
/*if (alarm[8] = -1)
   {
    alarm[8] = room_speed * (20/60);
   }*/

//scr_movement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Up Recovery Ends
recovery = false;
if (key_U_held)
   {
    //sprite_index = spr_player_up;
   }
else
   {
    //sprite_index = spr_player;
    up = false;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Air Spike
if (right = true)
   {
    if (big_bat_active == false)
       {
        instance_create(x+16,y+32,obj_hit_cone_spike);
        spike = instance_create(x,y,obj_bat_spike);
       }
    else
       {
        instance_create(x+16,y+32,obj_hit_cone_spike);
        spike = instance_create(x,y,obj_spike_big);
       }
    swinging = false;
    recovery = true;
    if (alarm[6] = -1)
       {
        alarm[6] = room_speed * (11/60);
        //sprite_index = spr_player_recovery;
       }
    /*with (spike)
         {
          //show_debug_message("Call the script please.");
          scr_wall_bounce();
         }*/
   }

else
   {
    if (big_bat_active == false)
       {
        instance_create(x-16,y+32,obj_hit_cone_spike_L);
        spike = instance_create(x,y,obj_bat_spike_L);
       }
    else
       {
        instance_create(x-16,y+32,obj_hit_cone_spike_L);
        spike = instance_create(x,y,obj_spike_L_big);
       }
    swinging = false;
    recovery = true;
    if (alarm[6] = -1)
       {
        alarm[6] = room_speed * (11/60);
        //sprite_index = spr_player_recovery;
       }
    /*with (spike)
         {
          //show_debug_message("Call the OTHER script please.");
          scr_wall_bounce_L();
         }*/
   }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Second Charge
if (charging == true)
   {
    if (up = true)
       {
        //sprite_index = spr_player_up_charged2;
       }
    else
       {   
        //sprite_index = spr_player_charged2;
       }
    chargeOne = false;
    chargeTwo = true;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///First Charge
if (charging == true)
   {
    if (up = true)
       {
        //sprite_index = spr_player_up_charged1;
       }
    else
       {   
        //sprite_index = spr_player_charged1;
       }
    chargeOne = true;
    alarm[4] = room_speed * (20/60);
   }
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charged Swing
if (/*keyboard_check(vk_numpad2)*/key_Swing_Held)
   {
    if (up == true)
       {
        //sprite_index = spr_player_up_charging;
       }
    else
       {   
        //sprite_index = spr_player_charging;
       }
    
    mspd = 0;
    hspd = 0;
    jspd = 0;
    if (charging == false)
       {
        charging = true;
        alarm[3] = room_speed * (16/60);
       }
   }
else
   {
    if (swinging == false &amp;&amp; recovery == false &amp;&amp; charging == false)   
       { 
        charging = false;     
        swinging = true;
        if (alarm[0] = -1)
           {
            mspd = 0;
            hspd = 0;
            jspd = 0;
            alarm[0] = room_speed * (9/60);
           }     
                
       }
   }
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recovery Ends
recovery = false;
mspd = mspd_normal;
jspd = jump;
chargeOne = false;
chargeTwo = false;
if (key_U_held)
   {
    //sprite_index = spr_player_up;
   }
else
   {
    //sprite_index = spr_player;
    up = false;
   }
state = states.normal;
show_debug_message("Player Recovery is over.");   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swing Bat and Recovery Begins
if (right = true)
   {
    if ((up = true || up_stored = true))
       {
        if (big_bat_active == false)
           {
            show_debug_message("launcher");
            instance_create(x+16,y-32, obj_hit_cone_launcher);
            instance_create(x,y,obj_bat_launcher);
           }
        else
           {
            show_debug_message("big launcher");
            instance_create(x+16,y-32, obj_hit_cone_launcher);
            instance_create(x,y,obj_bat_launcher_big);
           }
        jspd = jump;
        state = states.normal
       }
    else
       {
        if (big_bat_active == false)
           {
            instance_create(x+16,y, obj_hit_cone);
            instance_create(x,y,obj_bat);
           }
        else
           {
            instance_create(x+16,y, obj_hit_cone);
            instance_create(x,y,obj_bat_big);
           }
       }
    swinging = false;
    recovery = true;
    if (alarm[1] = -1)
       {
        alarm[1] = room_speed * (15/60);
        //sprite_index = spr_player_recovery;
       }
    up_stored = false;
   }
else
   {
    if ((up = true || up_stored = true))
       {
        if (big_bat_active == false)
           {
            instance_create(x-16,y-32, obj_hit_cone_launcher_L);
            instance_create(x,y,obj_bat_launcher_L);
           }
        else
           {
            
            instance_create(x-16,y-32, obj_hit_cone_launcher_L);
            instance_create(x,y,obj_bat_launcher_L_big);
           }
        jspd = jump;
        state = states.normal;
       }
    else
       {
        if (big_bat_active == false)
           {
            instance_create(x-16,y, obj_hit_cone_L);
            instance_create(x,y,obj_bat);
           }
        else
           {
            instance_create(x-16,y, obj_hit_cone_L);
            instance_create(x,y,obj_bat_big);
           }
       }
    swinging = false;
    recovery = true;
    if (alarm[1] = -1)
       {
        alarm[1] = room_speed * (15/60);
        //sprite_index = spr_player_recovery;
       }
    up_stored = false;
   }
if (chargeOne == true)
   {
    show_debug_message("Charge One is true.");
   }
if (chargeTwo == true)
   {
    show_debug_message("Charge TWO is true.");
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch States

switch (state)
       {
        case states.normal: 
             {
              scr_movement();
              //scr_player_animation_control_script(); 
              break;
             }
        case states.knockback: 
             {
              scr_knockback(); 
              break; 
             }
        case states.hitstop:
             {
              scr_player_hitstop();
              break;
             }
        case states.swinging: 
             {
              scr_swing(); 
              break; 
             }
        case states.sliding:
             {
              scr_sliding();
              break;
             }
        case states.powerslide:
             {
              scr_power_slide();
              break;
             }
       }

//animations
scr_player_animation_control_script();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Health Bar
if (iframes == true)
   {
    if (alarm[7] % 3 != 0)
       {
        draw_self();
       }
   }
else
   {
    draw_self();
   }

draw_sprite_ext(spr_health_bar,1,view_xview[0]+15, view_yview[0]+15, obj_player.hp/100, 1, 0, c_white,1);
draw_sprite(spr_health_bar_background,1,view_xview[0]+15, view_yview[0]+15);
draw_sprite_ext(spr_stamina_bar,1,view_xview[0]+15, view_yview[0]+45, obj_player.sp/100, 1, 0, c_white,1);
draw_sprite(spr_stamina_bar_background,1,view_xview[0]+15, view_yview[0]+45);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
