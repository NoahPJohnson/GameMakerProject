<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grv  = 0.4;
frc  = 0.1; 
hspd = 0;
vspd = 0;
mxspd = 40;
struck = false;
multiplier = 2;
impetus = 6;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gravity
if (vspd &lt; 10) 
   {
    vspd += grv;
   }

//Charges
if (obj_player.chargeOne = true)
   {
    multiplier = 3;
    impetus = 20;
   }

if (obj_player.chargeTwo = true)
   {
    multiplier = 4;
    impetus = 40;
   }

if (obj_player.chargeOne = false &amp;&amp; obj_player.chargeTwo = false)
   {
    multiplier = 2;
    impetus = 8;
   }   

//Bat Collision
if (struck = false)
   {
    //HBat Collision
    if (place_meeting(x,y,obj_bat))
       {
        if (obj_player.right = true)
           { 
            hspd = (abs(hspd) * multiplier) + impetus;            
           }      
        if (obj_player.right = false)
           {
            hspd = (-abs(hspd) * multiplier) - impetus;
           }
        struck = true; 
       }

    
   }

if (obj_player.recovery = false)
   {
    struck = false;
   }

//Horizontal Collision
if (place_meeting(x+hspd,y,obj_boundary))
   {
    while (!place_meeting(x+sign(hspd),y,obj_boundary))
          {
           x += sign(hspd);
          } 
    hspd = -hspd;
    if (hspd &gt; 0) 
       {
        hspd -= frc;
       }
          
    if (hspd &lt; 0) 
       {
        hspd += frc;
       }          

    if (abs(hspd) &lt; 1)
       {
        hspd = 0;
       }
}

//Vertical Collision
if (place_meeting(x,y+vspd,obj_boundary))
   {
    while (!place_meeting(x,y+sign(vspd),obj_boundary))
          {
           y += sign(vspd);        
          } 

    vspd = -vspd * .65;
    if (hspd &gt; 0) 
       {
        hspd -= frc;
       }
          
    if (hspd &lt; 0) 
       {
        hspd += frc;
       }  
    
    if (abs(vspd) &lt; 1)
       {
        vspd = 0;
       }

    if (abs(hspd) &lt; 1)
       {
        hspd = 0;
       }
}

//Max Speed
if (abs(hspd) &gt; mxspd)
   {
    hspd = hspd/abs(hspd) * mxspd;
   }
if (abs(vspd) &gt; mxspd)
   {
    vspd = vspd/abs(vspd) * mxspd;
   }

x += hspd
y += vspd

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Launcher
//Bat Collision
if (struck = false)
   {
    //HBat Collision
    if (place_meeting(x,y,obj_bat_launcher))
       {      
        if (obj_player.right = true)
           { 
            hspd = 7;            
           }      
        if (obj_player.right = false)
           {
            hspd = -7;
           }
        //impetus += abs(hspd);
        vspd = -(abs(vspd) * multiplier) - impetus;
        struck = true; 
       }    
   }

if (obj_player.recovery = false)
   {
    struck = false;
   }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Spike
if (struck = false)
   {
    //HBat Collision
    if (place_meeting(x,y,obj_bat_spike))
       {      
        if (obj_player.right = true)
           { 
            hspd = 9;            
           }      
        if (obj_player.right = false)
           {
            hspd = -9;
           }
        vspd = (abs(vspd) * multiplier) + impetus;
        struck = true; 
       }    
   }

if (obj_player.recovery = false)
   {
    struck = false;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
