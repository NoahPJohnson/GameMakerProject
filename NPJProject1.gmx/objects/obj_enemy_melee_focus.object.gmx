<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_melee_focus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Modes
longRange = true;
antiAir = false;

//Movement
hspd = 0;
vspd = 0;
jspeed = 13;
switched = false;
chsSpeed = 2;
chsSpeed_LR = 4;
chsSpeed_CR = 2;
destination_distance_LR = 300;
destination_distance_CR = 120;
jumping_type = false;
jumping = false;
dir = 0;
grv = 0.8;
frc = 0.5;
slope_mod = 2;

//Attacks
firing = false;
first_shot = true;
firSpeed = 72;
melee_dir = 0;
teleport_dir = 1;
meleeAttack = false;
follow_up_attack = false;
melee_hitbox = noone;

//Damage and Hit Reaction
hit = false;
hitdir = 0;
old_speed = 0;
impetus = 1;
weight_factor = 1;
hitstun = false;
hitstun_direction = 0;
hitstop = false;
damage_hitstop = false;
old_state = e_state.idle;
alarm_array[0] = -1;
air_recovery = true;
stopped = true;
valid = false;

slide_through = true;

//Crash State
mxspd = 40;
hp = 4;
hp_max = 4;
crash_sprite = spr_enemy_crash;
cp = 2;
cp_max = 2;

state = e_state.idle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Lunge Ends
//hspd = dir * chsSpeed;
//vspd = (min(7, vspd + grv));
//grv = 0.8;
if (distance_to_object(obj_player) &lt; 170 &amp;&amp; follow_up_attack == false)
   {
    if (place_meeting(x, y+1, obj_boundary))
       {
        follow_up_attack = true;
        show_debug_message("Set follow up to true");
        show_debug_message("Conditions for follow up are met.");
        alarm[7] = room_speed * (20/60);
        vspd = -(jspeed);
           
       }
   }
else
   {
    follow_up_attack = false;
    hspd = dir * chsSpeed;
    vspd = (min(7, vspd + grv));
    grv = 0.8;
   }
//switched = true;
if (instance_exists(melee_hitbox))
   {
    longRange = false;   
    melee_hitbox.alarm[0] = room_speed * (1/60);
   }
else
   {
    longRange = true;
   }
if (hp &lt; 2)
   {
    longRange = false;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Decision is made, attack begins
if (longRange == false &amp;&amp; follow_up_attack == true)
   {
    if (!place_meeting(x,y+1,obj_boundary))
       {
        if (!instance_exists(melee_hitbox))
           {
            if (obj_player.x &lt; x)
               {
                melee_hitbox = instance_create(x-48, y, obj_melee_hitbox_leap);
                
               }
            else
               {
                melee_hitbox = instance_create(x+48, y, obj_melee_hitbox_leap);
               }
            show_debug_message("Follow Up!");
            melee_hitbox.enemy_parent = self;
           }
       }
   }
if (longRange == false &amp;&amp; follow_up_attack == false)
   {
    if (place_meeting(x, y+1, obj_boundary))
       {
        if (!instance_exists(melee_hitbox))
           {
            /*if (obj_player.state != states.sliding)
               {
                melee_dir = sign(obj_player.x - x);
               }*/
            if (antiAir == false)
               {
                if (melee_dir &lt; 0)
                   {
                    melee_hitbox = instance_create(x-64, y, obj_melee_hitbox_long);
                   }
                else
                   {
                    melee_hitbox = instance_create(x+64, y, obj_melee_hitbox_long);
                   }
                show_debug_message("hitbox LONG");             
               }    
            else
               {
                if (melee_dir &lt; 0)
                   {
                    melee_hitbox = instance_create(x-48, y-32, obj_melee_hitbox_anti_air_2);
                   }
                else
                   {
                    melee_hitbox = instance_create(x+48, y-32, obj_melee_hitbox_anti_air_2);
                   }
                show_debug_message("anti AIR hitbox");
               }
            melee_hitbox.enemy_parent = self;            
           }
       }    
    if (antiAir == false)
       {
        //hspd = melee_dir * chsSpeed * 2;
       }
    else
       {
        if (place_meeting(x, y+1, obj_boundary))
           {
            //vspd = -(jspeed+4);
            //hspd = melee_dir * chsSpeed * .8;
           }
       }

   }
/*if (distance_to_object(obj_player) &lt; 170 &amp;&amp; follow_up_attack == false)
   {
    if (place_meeting(x, y+1, obj_boundary))
       {
        follow_up_attack = true;
        show_debug_message("Set follow up to true");
        show_debug_message("Conditions for follow up are met.");
        alarm[7] = room_speed * (20/60);
        vspd = -(jspeed);
           
       }
   }
else
   {*/
    //follow_up_attack = false;
    if (alarm[8] = -1)
       {
        if (follow_up_attack == false)
           { 
            alarm[8] = room_speed * (15/60);
           }
        else
           {
            alarm[8] = room_speed * (45/60);
           } 
       }
    
//   }
/*else
   {
    if (!place_meeting(x, y+1, obj_boundary))
       {
        hspd = dir * chsSpeed * 3;
        vspd = 13;
        //grv = 0.8;
        
        if (alarm[8] = -1)
           { 
            alarm[8] = 20;
           }
       }    
   }*/    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
if (place_meeting(x, y+1, obj_boundary))
   {
    //hspd = (hspd/2);
    //chsSpeed = 3.5;
    vspd = -jspeed;
   }
else
   {
    alarm[5] = room_speed * (94/60); 
   }           
       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit End
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crash End
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Projectile
if (!collision_line(obj_player.x,obj_player.y,obj_player.x-(50*teleport_dir),obj_player.y-32,obj_boundary,false,true) &amp;&amp; !collision_line(obj_player.x,obj_player.y,obj_player.x-(50*teleport_dir),obj_player.y-32,obj_enemy,false,true))
   {
    longRange = false;
    x = obj_player.x - (40*teleport_dir);
    y = obj_player.y - 16;
   }
else if (!collision_line(obj_player.x,obj_player.y,obj_player.x+(50*teleport_dir),obj_player.y-32,obj_boundary,false,true) &amp;&amp; !collision_line(obj_player.x,obj_player.y,obj_player.x+(50*teleport_dir),obj_player.y-32,obj_enemy,false,true))
   {
    longRange = false;
    x = obj_player.x + (40*teleport_dir);
    y = obj_player.y - 16;
   }
//projectile = instance_create(x,y, obj_projectile);
firing = false;
//sprite_index = spr_enemy;
hspd = dir * chsSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hitstun End
hit = false;
hitstun = false;
/*stopped = true;
speed = 0;
direction = 0;
state = e_state.idle*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop and Prepare to Fire
firing = true;
hspd = 0;
teleport_dir = obj_player.image_xscale;
//sprite_index = spr_player;
//alarm[0] = 53;
alarm[2] = room_speed * (30/60);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch State
switch (state)
       {
        case e_state.idle: 
             {   
              scr_enemy(); 
              break;
             }
        case e_state.chase: 
             {
              scr_enemy_chase_melee_focus(); 
              break;        
             }
        case e_state.hitstun:
             {
              scr_hit_stun();
              break;
             }
        case e_state.hitstop:
             {
              scr_hitstop();
              break;
             }
        case e_state.crash:
             {
              scr_crash();
              break;
             }
       }
       
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
